{"hierarchy":{"paths":[["doc:\/\/pksnavigation.PKSNavigation\/documentation\/PKSNavigation"]]},"kind":"article","abstract":[{"type":"text","text":"In this guide, you’ll learn how to leverage the "},{"isActive":true,"identifier":"doc:\/\/pksnavigation.PKSNavigation\/documentation\/PKSNavigation\/PKSPage","type":"reference"},{"text":" protocol to create modular, identifiable, and hashable pages within your SwiftUI applications. Whether you’re building a simple app or a complex navigation system, ","type":"text"},{"isActive":true,"identifier":"doc:\/\/pksnavigation.PKSNavigation\/documentation\/PKSNavigation\/PKSPage","type":"reference"},{"type":"text","text":" provides the flexibility and structure you need to manage your app’s user interface efficiently."}],"schemaVersion":{"major":0,"patch":0,"minor":3},"metadata":{"modules":[{"name":"PKSNavigation"}],"roleHeading":"Article","role":"article","title":"Deep Dive to PKSPage"},"identifier":{"url":"doc:\/\/pksnavigation.PKSNavigation\/documentation\/PKSNavigation\/DeepDiveToPKSPage","interfaceLanguage":"swift"},"sections":[],"primaryContentSections":[{"content":[{"level":2,"text":"Overview","type":"heading","anchor":"overview"},{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"doc:\/\/pksnavigation.PKSNavigation\/documentation\/PKSNavigation\/PKSPage"},{"text":" is a protocol designed to represent individual pages within your SwiftUI application’s user interface. By conforming to ","type":"text"},{"identifier":"doc:\/\/pksnavigation.PKSNavigation\/documentation\/PKSNavigation\/PKSPage","type":"reference","isActive":true},{"type":"text","text":", you ensure that each page is:"}]},{"items":[{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Identifiable"}]},{"text":": Each page has a unique identifier, making it easy to manage and reference.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Hashable","type":"text"}]},{"text":": Pages can be compared and stored in collections efficiently.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"View-Providing","type":"text"}]},{"text":": Each page provides its own SwiftUI ","type":"text"},{"type":"codeVoice","code":"View"},{"text":", encapsulating its UI components and behavior.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Descriptive"}],"type":"strong"},{"type":"text","text":": Each page includes a description, enhancing readability and maintainability."}]}]}],"type":"unorderedList"},{"anchor":"Key-Features","type":"heading","level":3,"text":"Key Features"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Modularity"}],"type":"strong"},{"text":": Define each page separately, promoting clean and organized code.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Flexibility"}],"type":"strong"},{"type":"text","text":": Easily integrate with navigation systems like "},{"type":"codeVoice","code":"PKSNavigation"},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Type Safety"}],"type":"strong"},{"text":": Leverage Swift’s type system to ensure consistency across your pages.","type":"text"}]}]}],"type":"unorderedList"},{"text":"Conforming to the PKSPage Protocol","level":2,"anchor":"Conforming-to-the-PKSPage-Protocol","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"To utilize "},{"isActive":true,"type":"reference","identifier":"doc:\/\/pksnavigation.PKSNavigation\/documentation\/PKSNavigation\/PKSPage"},{"type":"text","text":", you’ll need to create types that conform to the protocol. This ensures that each page adheres to the required structure and functionalities."}]},{"anchor":"Understanding-the-PKSPage-Protocol","type":"heading","level":3,"text":"Understanding the PKSPage Protocol"},{"code":["import SwiftUI","","public protocol PKSPage: Hashable, Identifiable {","    ","    \/\/\/ The type of view representing the body of this page.","    associatedtype Body: View","    ","    \/\/\/ A view builder that constructs the view for this page.","    \/\/\/","    \/\/\/ Implement this method to provide the content for your custom page.","    @MainActor @ViewBuilder var body: Self.Body { get }","    ","    \/\/\/ A description of the page.","    var description: String { get }","}","","extension PKSPage {","    \/\/\/ A unique identifier for the page, derived from the hash value.","    public var id: Int {","        return self.hashValue","    }","}"],"type":"codeListing","syntax":"swift"},{"text":"Protocol Breakdown","type":"heading","level":3,"anchor":"Protocol-Breakdown"},{"items":[{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Associated Type ","type":"text"},{"type":"codeVoice","code":"Body"}]},{"type":"text","text":": Defines the type of "},{"type":"codeVoice","code":"View"},{"type":"text","text":" that represents the page’s content."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"type":"codeVoice","code":"body"},{"type":"text","text":" Property"}]},{"type":"text","text":": A view builder that constructs the page’s UI."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"code":"description","type":"codeVoice"},{"text":" Property","type":"text"}],"type":"strong"},{"text":": Provides a textual description of the page.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"code":"id","type":"codeVoice"},{"type":"text","text":" Property"}]},{"text":": Automatically derived from the hash value, ensuring each page is uniquely identifiable.","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"anchor":"Implementing-Custom-Pages","text":"Implementing Custom Pages","type":"heading","level":2},{"type":"paragraph","inlineContent":[{"text":"Let’s create custom pages by conforming to ","type":"text"},{"type":"codeVoice","code":"PKSPage"},{"type":"text","text":". We’ll define an enumeration "},{"code":"Pages","type":"codeVoice"},{"type":"text","text":" that represents different pages in the app."}]},{"text":"Example: Defining Pages (Variation One)","type":"heading","level":3,"anchor":"Example-Defining-Pages-Variation-One"},{"code":["import SwiftUI","import PKSNavigation","","enum Pages: PKSPage {","    case home","    case settings","","    var description: String {","        switch self {","        case .home:","            return \"Home Page\"","        case .settings:","            return \"Settings Page\"","        }","    }","","    @ViewBuilder","    var body: some View {","        switch self {","        case .home:","            HomeView()","        case .settings:","            SettingsView()","        }","    }","}"],"syntax":"swift","type":"codeListing"},{"anchor":"Example-Defining-Pages-Variation-Two","level":3,"text":"Example: Defining Pages (Variation Two)","type":"heading"},{"code":["import SwiftUI","import PKSNavigation","","struct HomeView: PKSPage {","    var body: some View {","        VStack {","            Text(\"Welcome to the Home Page\")","                .font(.largeTitle)","                .padding()","            \/\/ Additional UI components","        }","    }","","    var description: String {","        return \"HomeView\"","    }","}","","struct SettingsView: PKSPage {","    var body: some View {","        VStack {","            Text(\"Settings\")","                .font(.largeTitle)","                .padding()","            \/\/ Additional UI components","        }","    }","","    var description: String {","        return \"SettingsView\"","    }","}"],"type":"codeListing","syntax":"swift"},{"text":"Explanation","level":3,"anchor":"Explanation","type":"heading"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"inlineContent":[{"text":"Enumeration Cases","type":"text"}],"type":"strong"},{"type":"text","text":": Each case represents a distinct page ("},{"code":"home","type":"codeVoice"},{"type":"text","text":" and "},{"type":"codeVoice","code":"settings"},{"text":").","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"type":"codeVoice","code":"description"}]},{"text":": Provides a readable description for each page.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"code":"body","type":"codeVoice"}],"type":"strong"},{"type":"text","text":": Returns the corresponding "},{"code":"View","type":"codeVoice"},{"type":"text","text":" for each page."}]}]}]},{"level":2,"type":"heading","text":"Integrating PKSPage with PKSNavigation","anchor":"Integrating-PKSPage-with-PKSNavigation"},{"inlineContent":[{"text":"To manage navigation between different pages, integrate ","type":"text"},{"type":"reference","identifier":"doc:\/\/pksnavigation.PKSNavigation\/documentation\/PKSNavigation\/PKSPage","isActive":true},{"text":" with ","type":"text"},{"type":"codeVoice","code":"PKSNavigation"},{"text":". This allows for a seamless and structured navigation flow within your app.","type":"text"}],"type":"paragraph"},{"anchor":"Step-1-Initialize-PKSNavigationManager","level":3,"text":"Step 1: Initialize PKSNavigationManager","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Create instances of "},{"type":"codeVoice","code":"PKSNavigationManager"},{"text":" for managing navigation states.","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["import SwiftUI","import PKSNavigation","","struct ContentView: View {","    @StateObject private var homeNavigation = PKSNavigationManager(identifier: \"HomeNavigation\")","    @StateObject private var settingsNavigation = PKSNavigationManager(identifier: \"SettingsNavigation\")","","    var body: some View {","        TabView {","            PKSNavigationContainer(navigationManager: homeNavigation) {","                HomeRootView()","            }","            .tabItem {","                Label(\"Home\", systemImage: \"house\")","            }","","            PKSNavigationContainer(navigationManager: settingsNavigation) {","                SettingsRootView()","            }","            .tabItem {","                Label(\"Settings\", systemImage: \"gear\")","            }","        }","    }","}"]},{"type":"heading","text":"Step 2: Configure PKSNavigationContainer","anchor":"Step-2-Configure-PKSNavigationContainer","level":3},{"inlineContent":[{"type":"text","text":"Wrap each page’s root view with "},{"code":"PKSNavigationContainer","type":"codeVoice"},{"text":", passing the respective ","type":"text"},{"code":"PKSNavigationManager","type":"codeVoice"},{"text":" instance. This setup ensures that each tab manages its own navigation stack independently.","type":"text"}],"type":"paragraph"},{"type":"heading","level":3,"text":"Step 3: Define Navigation Flow","anchor":"Step-3-Define-Navigation-Flow"},{"inlineContent":[{"type":"text","text":"Within each view (e.g., "},{"code":"HomeView","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"SettingsView","type":"codeVoice"},{"text":"), use ","type":"text"},{"code":"PKSNavigationManager","type":"codeVoice"},{"text":" to navigate to other pages as needed.","type":"text"}],"type":"paragraph"},{"level":4,"type":"heading","anchor":"Variation-One","text":"Variation One"},{"type":"codeListing","code":["struct HomeView: View {","    @EnvironmentObject var navigationManager: PKSNavigationManager","","    var body: some View {","        VStack {","            Text(\"Welcome to the Home Page\")","                .font(.largeTitle)","                .padding()","","            Button(action: {","                navigationManager.navigate(to: Pages.settings)","            }) {","                Text(\"Go to Settings\")","                    .padding()","                    .background(Color.blue)","                    .foregroundColor(.white)","                    .cornerRadius(8)","            }","        }","    }","}"],"syntax":"swift"},{"level":4,"text":"Variation Two","type":"heading","anchor":"Variation-Two"},{"type":"codeListing","syntax":"swift","code":["struct HomeView: View {","    @EnvironmentObject var navigationManager: PKSNavigationManager","","    var body: some View {","        VStack {","            Text(\"Welcome to the Home Page\")","                .font(.largeTitle)","                .padding()","","            Button(action: {","                navigationManager.navigate(to: SettingsView())","            }) {","                Text(\"Go to Settings\")","                    .padding()","                    .background(Color.blue)","                    .foregroundColor(.white)","                    .cornerRadius(8)","            }","        }","    }","}"]},{"text":"Enums with Parameters","type":"heading","level":2,"anchor":"Enums-with-Parameters"},{"level":3,"type":"heading","anchor":"Description","text":"Description"},{"inlineContent":[{"type":"text","text":"In more complex applications, pages may require parameters to customize their content or behavior dynamically. By defining enum cases with associated values, you can pass necessary data to your pages seamlessly. This approach enhances flexibility and reusability, allowing the same page structure to display different content based on the provided parameters."}],"type":"paragraph"},{"code":["\/\/ MARK: Pages","enum Pages: PKSPage {","    case simplePage","    case pageWithParam(title: String)","    case pageWithObject(configuration: ObjectConfiguration)","    ","    @ViewBuilder","    var body: some View {","        switch self {","        case .simplePage:","            SimplePageView()","        case .pageWithParam(let title):","            PageWithParamView(title: title)","        case .pageWithObject(let configuration):","            PageWithObjectView(configuration: configuration)","        }","    }","    ","    var description: String {","        switch self {","        case .simplePage:","            return \"Simple Page\"","        case .pageWithParam(let title):","            return \"Page with Parameter - \\(title)\"","        case .pageWithObject(let configuration):","            return \"Page with Object - \\(configuration.toString())\"","        }","    }","}","","\/\/ MARK: ObjectConfiguration","struct ObjectConfiguration: Hashable, Equatable {","    var a: String","    var b: Bool","    var c: Int","}","","extension ObjectConfiguration {","    func toString() -> String {","        return \"A: \\(a) - B: \\(b) - C: \\(c)\"","    }","}","","\/\/ MARK: Views","struct SimplePageView: View {","    var body: some View {","        Text(\"Simple Page\")","            .font(.title)","            .padding()","    }","}","","struct PageWithParamView: View {","    var title: String","    var body: some View {","        Text(\"Page with Title: \\(title)\")","            .font(.title)","            .padding()","    }","}","","struct PageWithObjectView: View {","    var configuration: ObjectConfiguration","    var body: some View {","        VStack {","            Text(\"Page with Configuration\")","                .font(.title)","                .padding()","            Text(configuration.toString())","                .font(.body)","                .padding()","        }","    }","}"],"type":"codeListing","syntax":"swift"},{"level":3,"text":"Explanation","anchor":"Explanation","type":"heading"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Enumeration Cases with Associated Values"}]},{"type":"text","text":":"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"code":"simplePage","type":"codeVoice"},{"type":"text","text":": Represents a basic page without additional parameters."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":"pageWithParam(title: String)"},{"type":"text","text":": Allows passing a "},{"type":"codeVoice","code":"title"},{"type":"text","text":" to customize the page’s content."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"pageWithObject(configuration: ObjectConfiguration)"},{"type":"text","text":": Enables passing a complex object for more detailed configurations."}]}]}],"type":"unorderedList"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"codeVoice","code":"description"}]},{"type":"text","text":": Provides a readable description for each page, including the associated parameters where applicable."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"code":"body","type":"codeVoice"}]},{"text":": Returns the corresponding ","type":"text"},{"type":"codeVoice","code":"View"},{"type":"text","text":" for each page, utilizing the provided parameters to customize the UI."}]}]}]},{"anchor":"Authors-Recommendations","text":"Author’s Recommendations","type":"heading","level":2},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Use Enum-Based Navigation for Complex Flows","type":"text"}]},{"text":": If your application has intricate navigation requirements, leveraging enum-based navigation will significantly enhance code readability and maintainability. Enums clearly define all possible navigation paths, making it easier to understand and manage the flow.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Separate Navigation Flows Using Enums"}]},{"type":"text","text":": Each distinct flow in your application should have its own enum. This separation ensures that different sections of your app, such as Settings and Home, operate independently without interfering with one another. For example, the Settings flow shouldn’t interact with the Home flow, adhering to the "},{"type":"strong","inlineContent":[{"text":"Single Responsibility Principle","type":"text"}]},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Maintain Type Safety Across Pages"}],"type":"strong"},{"text":": By defining your pages using the ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/pksnavigation.PKSNavigation\/documentation\/PKSNavigation\/PKSPage"},{"text":" protocol and enums, you leverage Swift’s strong type system. This approach minimizes runtime errors and ensures that all navigation actions are predictable and consistent.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Encapsulate Page Logic Within Views","type":"text"}]},{"type":"text","text":": Keep the logic related to each page within its respective "},{"type":"codeVoice","code":"View"},{"text":" struct. This encapsulation promotes modularity and makes it easier to test and reuse components across your application.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Utilize Descriptive Naming Conventions"}],"type":"strong"},{"text":": Assign clear and descriptive names to your pages and their associated parameters. This practice enhances code readability and makes it easier for other developers (or your future self) to understand the purpose and functionality of each component.","type":"text"}]}]}],"type":"unorderedList"},{"inlineContent":[{"type":"text","text":"Happy coding!"}],"type":"paragraph"}],"kind":"content"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/pksnavigation\/deepdivetopkspage"]}],"references":{"doc://pksnavigation.PKSNavigation/documentation/PKSNavigation":{"role":"collection","identifier":"doc:\/\/pksnavigation.PKSNavigation\/documentation\/PKSNavigation","url":"\/documentation\/pksnavigation","abstract":[{"type":"strong","inlineContent":[{"text":"PKSNavigation","type":"text"}]},{"type":"text","text":" is a simple yet powerful navigation framework designed for SwiftUI applications. It helps you manage complex navigation flows with ease, supporting stack-based navigation, sheet presentations, and full-screen covers. Whether you’re building a small app or a large-scale project, PKSNavigation streamlines your navigation logic, making your code cleaner and more maintainable."}],"type":"topic","title":"PKSNavigation","kind":"symbol"},"doc://pksnavigation.PKSNavigation/documentation/PKSNavigation/PKSPage":{"type":"topic","kind":"symbol","role":"symbol","url":"\/documentation\/pksnavigation\/pkspage","title":"PKSPage","navigatorTitle":[{"text":"PKSPage","kind":"identifier"}],"abstract":[{"code":"PKSPage","type":"codeVoice"},{"text":" is a protocol designed to represent individual pages within your SwiftUI application’s user interface. This documentation provides straightforward examples to help you integrate ","type":"text"},{"type":"codeVoice","code":"PKSPage"},{"type":"text","text":" into your project seamlessly."}],"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"PKSPage"}],"identifier":"doc:\/\/pksnavigation.PKSNavigation\/documentation\/PKSNavigation\/PKSPage"}}}